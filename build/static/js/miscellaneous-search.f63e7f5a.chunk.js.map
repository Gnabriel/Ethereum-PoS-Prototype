{"version":3,"sources":["views/app/pages/miscellaneous/search.js","components/common/CustomBootstrap.js","containers/navs/Breadcrumb.js","containers/pages/Pagination.js"],"names":["apiUrl","servicePath","SearchPages","props","state","items","currentPage","totalPage","keyword","totalItemCount","isLoading","pageSize","page","this","setState","dataListRender","axios","get","then","res","data","totalItem","rowLength","length","xxs","heading","match","className","map","item","i","key","to","id","title","category","description","onChangePage","Component","Colxx","widths","Separator","getMenuTitle","sub","getUrl","path","index","split","BreadcrumbItems","substr","paths","indexOf","filter","x","active","BreadcrumbContainer","Pagination","e","numberLimit","lastIsActive","firstIsActive","startPoint","endPoint","parseInt","points","push","firstPageButtonClassName","lastPageButtonClassName","prevPageButtonClassName","nextPageButtonClassName","onClick","React"],"mappings":"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","file":"static/js/miscellaneous-search.f63e7f5a.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport { Row, Card, CardBody } from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nimport Pagination from \"../../../../containers/pages/Pagination\";\r\nimport { servicePath } from \"../../../../constants/defaultValues\";\r\nimport Breadcrumb from \"../../../../containers/navs/Breadcrumb\";\r\nimport { Separator, Colxx } from \"../../../../components/common/CustomBootstrap\";\r\n\r\nconst apiUrl = servicePath + \"/cakes/paging\";\r\n\r\nclass SearchPages extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n      currentPage: 1,\r\n      totalPage: 12,\r\n      keyword: \"Cake\",\r\n      totalItemCount: 0,\r\n      isLoading: true,\r\n      pageSize: 10\r\n    };\r\n  }\r\n\r\n  onChangePage(page) {\r\n    this.setState(\r\n      {\r\n        currentPage: page\r\n      },\r\n      () => {\r\n        this.dataListRender();\r\n      }\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.dataListRender();\r\n  }\r\n\r\n  dataListRender() {\r\n    const { pageSize, currentPage, keyword } = this.state;\r\n    axios\r\n      .get(\r\n        `${apiUrl}?pageSize=${pageSize}&currentPage=${currentPage}&search=${keyword}`\r\n      )\r\n      .then(res => {\r\n        return res.data;\r\n      })\r\n      .then(data => {\r\n        this.setState({\r\n          totalPage: data.totalPage,\r\n          items: data.data,\r\n          totalItemCount: data.totalItem,\r\n          isLoading: false\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const rowLength = this.state.items.length;\r\n    const { isLoading } = this.state;\r\n    return (\r\n      <Fragment>\r\n        <Row>\r\n          <Colxx xxs=\"12\">\r\n            <Breadcrumb heading=\"menu.search\" match={this.props.match} />\r\n            <Separator className=\"mb-5\" />\r\n          </Colxx>\r\n        </Row>\r\n        <Row>\r\n          <Colxx xxs=\"12\" className=\"mb-4\">\r\n            <Card>\r\n              <CardBody>\r\n                {!isLoading ? (\r\n                  this.state.items.map((item, i) => {\r\n                    return (\r\n                      <div\r\n                        key={i}\r\n                        className={`${rowLength !== i + 1 ? \"mb-3\" : \"\"}`}\r\n                      >\r\n                        <NavLink to={`#${item.id}`} className=\"w-40 w-sm-100\">\r\n                          <p className=\"list-item-heading mb-1 color-theme-1\">\r\n                            {item.title}\r\n                          </p>\r\n                          <p className=\"mb-1 text-muted text-small\">\r\n                            Products | {item.category}\r\n                          </p>\r\n                          <p className=\"mb-4 text-small\">{item.description}</p>\r\n                        </NavLink>\r\n                        {rowLength !== i + 1 && <Separator />}\r\n                      </div>\r\n                    );\r\n                  })\r\n                ) : (\r\n                  <div className=\"loading\" />\r\n                )}\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n          <Pagination\r\n            currentPage={this.state.currentPage}\r\n            totalPage={this.state.totalPage}\r\n            onChangePage={i => this.onChangePage(i)}\r\n          />\r\n        </Row>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\nexport default SearchPages;\r\n","import React from 'react';\r\nimport { Col } from 'reactstrap';\r\nconst Colxx = (props) => (\r\n    <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\r\n);\r\nconst Separator = (props) => (\r\n    <div className={`separator ${props.className}`}></div>\r\n);\r\nexport { Colxx,Separator }","import React, { Fragment } from \"react\";\r\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\n\r\nconst getMenuTitle = sub => {\r\n  return <IntlMessages id={`menu.${sub}`} />;\r\n};\r\n\r\nconst getUrl = (path, sub, index) => {\r\n  if (index === 0) {\r\n    return \"\";\r\n  } else {\r\n    return path.split(sub)[0] + sub;\r\n  }\r\n};\r\n\r\nconst BreadcrumbContainer = ({ heading, match }) => {\r\n  return (\r\n    <Fragment>\r\n      {heading && <h1><IntlMessages id={heading}/></h1>}\r\n      <BreadcrumbItems match={match} />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport const BreadcrumbItems = ({ match }) => {\r\n  const path = match.path.substr(1);\r\n  let paths = path.split(\"/\");\r\n  if (paths[paths.length - 1].indexOf(\":\") > -1) {\r\n    paths = paths.filter(x => x.indexOf(\":\") === -1);\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\r\n        {paths.map((sub, index) => {\r\n          return (\r\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\r\n              {paths.length !== index + 1 ? (\r\n                <NavLink to={\"/\" + getUrl(path, sub, index)}>\r\n                  {getMenuTitle(sub)}\r\n                </NavLink>\r\n              ) : (\r\n                getMenuTitle(sub)\r\n              )}\r\n            </BreadcrumbItem>\r\n          );\r\n        })}\r\n      </Breadcrumb>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default BreadcrumbContainer;\r\n","import React from \"react\";\r\nimport { Colxx } from \"../../components/common/CustomBootstrap\";\r\nimport { Nav, NavItem, NavLink } from \"reactstrap\";\r\nclass Pagination extends React.Component {\r\n  componentDidMount() {}\r\n  onChangePage(e) {\r\n    this.props.onChangePage(e);\r\n  }\r\n  render() {\r\n    const {\r\n      totalPage = 0,\r\n      currentPage = 1,\r\n      numberLimit = 5,\r\n      lastIsActive = true,\r\n      firstIsActive = true\r\n    } = this.props;\r\n\r\n    let startPoint = 1;\r\n    let endPoint = numberLimit;\r\n\r\n    if (numberLimit > totalPage) {\r\n      startPoint = 1;\r\n      endPoint = totalPage;\r\n    } else if (currentPage <= parseInt(numberLimit / 2, 10)) {\r\n      startPoint = 1;\r\n      endPoint = numberLimit;\r\n    } else if (currentPage + parseInt(numberLimit / 2, 10) <= totalPage) {\r\n      startPoint = currentPage - parseInt(numberLimit / 2, 10);\r\n      endPoint = currentPage + parseInt(numberLimit / 2, 10);\r\n    } else {\r\n      startPoint = totalPage - (numberLimit - 1);\r\n      endPoint = totalPage;\r\n    }\r\n    startPoint = startPoint === 0 ? 1 : startPoint;\r\n    const points = [];\r\n    for (var i = startPoint; i <= endPoint; i++) {\r\n      points.push(i);\r\n    }\r\n\r\n    let firstPageButtonClassName = currentPage <= 1 ? \"disabled\" : \"\";\r\n    let lastPageButtonClassName = currentPage >= totalPage ? \"disabled\" : \"\";\r\n    let prevPageButtonClassName = currentPage <= 1 ? \"disabled\" : \"\";\r\n    let nextPageButtonClassName = currentPage >= totalPage ? \"disabled\" : \"\";\r\n    return totalPage > 1 ? (\r\n      <Colxx xxs=\"12\" className=\"mt-3\">\r\n        <Nav className=\"pagination justify-content-center\">\r\n          {firstIsActive && (\r\n            <NavItem className={`page-item ${firstPageButtonClassName}`}>\r\n              <NavLink\r\n                className=\"page-link first\"\r\n                onClick={() => this.onChangePage(1)}>\r\n                <i className=\"simple-icon-control-start\" />\r\n              </NavLink>\r\n            </NavItem>\r\n          )}\r\n\r\n          <NavItem className={`page-item ${prevPageButtonClassName}`}>\r\n            <NavLink\r\n              className=\"page-link prev\"\r\n              onClick={() => this.onChangePage(currentPage - 1)}\r\n            >\r\n              <i className=\"simple-icon-arrow-left\" />\r\n            </NavLink>\r\n          </NavItem>\r\n          {points.map(i => {\r\n            return (\r\n              <NavItem\r\n                key={i}\r\n                className={`page-item ${currentPage === i && \"active\"}`}>\r\n                <NavLink\r\n                  className=\"page-link\"\r\n                  onClick={() => this.onChangePage(i)}\r\n                >\r\n                  {i}\r\n                </NavLink>\r\n              </NavItem>\r\n            );\r\n          })}\r\n          <NavItem className={`page-item ${nextPageButtonClassName}`}>\r\n            <NavLink\r\n              className=\"page-link next\"\r\n              onClick={() => this.onChangePage(currentPage + 1)}\r\n            >\r\n              <i className=\"simple-icon-arrow-right\" />\r\n            </NavLink>\r\n          </NavItem>\r\n          {lastIsActive && (\r\n            <NavItem className={`page-item ${lastPageButtonClassName}`}>\r\n              <NavLink\r\n                className=\"page-link last\"\r\n                onClick={() => this.onChangePage(totalPage)}>\r\n                <i className=\"simple-icon-control-end\" />\r\n              </NavLink>\r\n            </NavItem>\r\n          )}\r\n        </Nav>\r\n      </Colxx>\r\n    ) : (\r\n      <Colxx xxs=\"12\" className=\"mt-2\" />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pagination;\r\n"],"sourceRoot":""}