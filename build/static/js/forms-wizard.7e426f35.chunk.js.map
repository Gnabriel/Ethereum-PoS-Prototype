{"version":3,"sources":["components/wizard/BottomNavigation.js","components/wizard/TopNavigation.js","containers/wizard/Basic.js","containers/wizard/LastStepEnd.js","containers/wizard/TopNavDisabled.js","containers/wizard/Validation.js","containers/wizard/Layouts.js","views/app/ui/forms/wizard.js","components/common/CustomBootstrap.js","containers/navs/Breadcrumb.js"],"names":["BottomNavigation","render","next","previous","step","steps","className","props","Button","color","indexOf","onClick","onClickPrev","prevLabel","length","onClickNext","nextLabel","Component","TopNavigation","getClassName","bind","itemClick","index","stepItem","isDone","push","this","disableNav","topNavClick","go","map","hideTopNav","key","to","name","desc","Basic","state","email","password","id","goToNext","goToPrev","messages","intl","Card","CardBody","Form","FormGroup","Label","IntlMessages","Input","type","placeholder","value","onChange","e","setState","target","injectIntl","LastStepEnd","bottomNavHidden","topNavDisabled","TopNavDisabled","Validation","validateEmail","validateName","validatePassword","form0","React","createRef","form1","form2","loading","fields","valid","form","error","test","setTimeout","formIndex","current","submitForm","then","values","errors","hideNavigation","asyncLoading","ref","initialValues","onSubmit","touched","validate","Spinner","Layouts","Row","xxs","xl","FormWizard","Breadcrumb","heading","match","Colxx","widths","Separator","getMenuTitle","sub","getUrl","path","split","BreadcrumbItems","substr","paths","filter","x","active","BreadcrumbContainer"],"mappings":"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","file":"static/js/forms-wizard.7e426f35.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { WithWizard } from 'react-albus';\r\nimport { Button } from \"reactstrap\";\r\n\r\nexport class BottomNavigation extends Component {\r\n    render() {\r\n        return (\r\n            <WithWizard render={({ next, previous, step, steps }) => (\r\n                <div className={\"wizard-buttons \" + this.props.className}>\r\n                    <Button color=\"primary\"\r\n                        className={\"mr-1 \" + (steps.indexOf(step) <= 0 ? \"disabled\" : \"\")}\r\n                        onClick={() => { this.props.onClickPrev(previous, steps, step) }}>\r\n                        {this.props.prevLabel}\r\n                    </Button>\r\n\r\n                    <Button color=\"primary\"\r\n                        className={(steps.indexOf(step) >= steps.length - 1 ? \"disabled\" : \"\")}\r\n                        onClick={() => { this.props.onClickNext(next, steps, step) }}>\r\n                        {this.props.nextLabel}\r\n                    </Button>\r\n                </div>\r\n            )} />\r\n        )\r\n    }\r\n}\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { WithWizard } from 'react-albus';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport class TopNavigation extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.getClassName = this.getClassName.bind(this);\r\n      this.itemClick = this.itemClick.bind(this);\r\n    }\r\n  \r\n    getClassName(steps, step, index, stepItem) {\r\n      if (steps.indexOf(step) === index) {\r\n        return \"step-doing\";\r\n      } else if (steps.indexOf(step) > index || stepItem.isDone) {\r\n        stepItem.isDone = true;\r\n        return \"step-done\";\r\n      }\r\n    }\r\n  \r\n    itemClick(stepItem, push) {\r\n      if(this.props.disableNav) {\r\n        return;\r\n      }\r\n      this.props.topNavClick(stepItem, push)\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <WithWizard render={({ next, previous, step, steps, go, push }) => (\r\n          <ul className={\"nav nav-tabs \" + this.props.className + (this.props.disableNav ? \" disabled\" : \"\")}>\r\n            {\r\n              steps.map((stepItem, index) => {\r\n                if (!stepItem.hideTopNav) {\r\n                  return (\r\n                    <li key={index} className={\"nav-item \" + this.getClassName(steps, step, index, stepItem)}>\r\n                      <NavLink to=\"#\" className=\"nav-link\" onClick={()=> this.itemClick(stepItem, push)}>\r\n                        <span>{stepItem.name}</span>\r\n                        <small>{stepItem.desc}</small>\r\n                      </NavLink>\r\n                    </li>\r\n                  )\r\n                } else {\r\n                  return <Fragment key={index} />\r\n                }\r\n              })\r\n            }\r\n          </ul>\r\n        )} />\r\n      )\r\n    }\r\n  }","import React, { Component } from \"react\";\r\nimport { Card, CardBody, Form, FormGroup, Input, Label } from \"reactstrap\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\nimport { Wizard, Steps, Step } from 'react-albus';\r\nimport { injectIntl } from 'react-intl';\r\nimport { BottomNavigation } from \"../../components/wizard/BottomNavigation\";\r\nimport { TopNavigation } from \"../../components/wizard/TopNavigation\";\r\n\r\nclass Basic extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onClickNext = this.onClickNext.bind(this);\r\n    this.onClickPrev = this.onClickPrev.bind(this);\r\n    this.topNavClick = this.topNavClick.bind(this);\r\n    this.state = {\r\n      name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    }\r\n  }\r\n\r\n  topNavClick(stepItem, push) {\r\n    push(stepItem.id);\r\n  }\r\n\r\n  onClickNext(goToNext, steps, step) {\r\n    step.isDone = true;\r\n    if (steps.length - 1 <= steps.indexOf(step)) {\r\n      return;\r\n    }\r\n    goToNext();\r\n  }\r\n\r\n  onClickPrev(goToPrev, steps, step) {\r\n    if (steps.indexOf(step) <= 0) {\r\n      return;\r\n    }\r\n    goToPrev();\r\n  }\r\n\r\n  render() {\r\n    const { messages } = this.props.intl;\r\n    return (\r\n      <Card>\r\n        <CardBody className=\"wizard wizard-default\">\r\n          <Wizard>\r\n            <TopNavigation className=\"justify-content-center\" disableNav={false} topNavClick={this.topNavClick} />\r\n            <Steps>\r\n              <Step id=\"step1\" name={messages[\"wizard.step-name-1\"]} desc={messages[\"wizard.step-desc-1\"]}>\r\n                <div className=\"wizard-basic-step\">\r\n                  <Form>\r\n                    <FormGroup>\r\n                      <Label>\r\n                        <IntlMessages id=\"forms.name\" />\r\n                      </Label>\r\n                      <Input type=\"text\" name=\"name\" placeholder={messages[\"forms.name\"]} value={this.state.name} onChange={(e)=> {this.setState({name: e.target.value})}}/>\r\n                    </FormGroup>\r\n                  </Form>\r\n                </div>\r\n              </Step>\r\n              <Step id=\"step2\" name={messages[\"wizard.step-name-2\"]} desc={messages[\"wizard.step-desc-2\"]}>\r\n                <div className=\"wizard-basic-step\">\r\n                  <Form>\r\n                    <FormGroup>\r\n                      <Label>\r\n                        <IntlMessages id=\"forms.email\" />\r\n                      </Label>\r\n                      <Input type=\"email\" name=\"email\" placeholder={messages[\"forms.email\"]} value={this.state.email} onChange={(e)=> {this.setState({email: e.target.value})}}/>\r\n                    </FormGroup>\r\n                  </Form>\r\n                </div>\r\n\r\n              </Step>\r\n              <Step id=\"step3\" name={messages[\"wizard.step-name-3\"]} desc={messages[\"wizard.step-desc-3\"]}>\r\n                <div className=\"wizard-basic-step\">\r\n                  <Form>\r\n                    <FormGroup>\r\n                      <Label>\r\n                        <IntlMessages id=\"forms.password\" />\r\n                      </Label>\r\n                      <Input type=\"password\" name=\"password\" placeholder={messages[\"forms.password\"]} value={this.state.password} onChange={(e)=> {this.setState({password: e.target.value})}}/>\r\n                    </FormGroup>\r\n                  </Form>\r\n                </div>\r\n              </Step>\r\n              <Step id=\"step4\" hideTopNav={true}>\r\n                <div className=\"wizard-basic-step text-center\">\r\n                  <h2 className=\"mb-2\"><IntlMessages id=\"wizard.content-thanks\" /></h2>\r\n                  <p><IntlMessages id=\"wizard.registered\" /></p>\r\n                </div>\r\n              </Step>\r\n            </Steps>\r\n            <BottomNavigation onClickNext={this.onClickNext} onClickPrev={this.onClickPrev} className=\"justify-content-center\" prevLabel={messages[\"wizard.prev\"]} nextLabel={messages[\"wizard.next\"]} />\r\n          </Wizard>\r\n        </CardBody>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\nexport default injectIntl(Basic)\r\n","import React, { Component } from \"react\";\r\nimport { Card, CardBody, Form, FormGroup, Input, Label } from \"reactstrap\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\nimport { Wizard, Steps, Step } from 'react-albus';\r\nimport { injectIntl } from 'react-intl';\r\nimport { BottomNavigation } from \"../../components/wizard/BottomNavigation\";\r\nimport { TopNavigation } from \"../../components/wizard/TopNavigation\";\r\n\r\nclass LastStepEnd extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onClickNext = this.onClickNext.bind(this);\r\n        this.onClickPrev = this.onClickPrev.bind(this);\r\n        this.topNavClick = this.topNavClick.bind(this);\r\n        this.state = {\r\n            bottomNavHidden: false,\r\n            topNavDisabled: false,\r\n\r\n            name: \"\",\r\n            email: \"\",\r\n            password: \"\",\r\n        }\r\n    }\r\n\r\n    topNavClick(stepItem, push) {\r\n        if (this.state.topNavDisabled) {\r\n            return;\r\n        }\r\n        push(stepItem.id);\r\n    }\r\n\r\n    onClickNext(goToNext, steps, step) {\r\n        step.isDone = true;\r\n        if (steps.length - 2 <= steps.indexOf(step)) {\r\n            this.setState({ bottomNavHidden: true, topNavDisabled: true });\r\n        }\r\n        if (steps.length - 1 <= steps.indexOf(step)) {\r\n            return;\r\n        }\r\n        goToNext();\r\n    }\r\n\r\n    onClickPrev(goToPrev, steps, step) {\r\n        if (steps.indexOf(step) <= 0) {\r\n            return;\r\n        }\r\n        goToPrev();\r\n    }\r\n\r\n    render() {\r\n        const { messages } = this.props.intl;\r\n        return (\r\n            <Card>\r\n                <CardBody className=\"wizard wizard-default\">\r\n                    <Wizard>\r\n                        <TopNavigation className=\"justify-content-center\" disableNav={false} topNavClick={this.topNavClick} />\r\n                        <Steps>\r\n                            <Step id=\"step1\" name={messages[\"wizard.step-name-1\"]} desc={messages[\"wizard.step-desc-1\"]}>\r\n                                <div className=\"wizard-basic-step\">\r\n                                    <Form>\r\n                                        <FormGroup>\r\n                                            <Label>\r\n                                                <IntlMessages id=\"forms.name\" />\r\n                                            </Label>\r\n                                            <Input type=\"text\" name=\"name\" placeholder={messages[\"forms.name\"]} value={this.state.name} onChange={(e) => { this.setState({ name: e.target.value }) }} />\r\n                                        </FormGroup>\r\n                                    </Form>\r\n                                </div>\r\n                            </Step>\r\n                            <Step id=\"step2\" name={messages[\"wizard.step-name-2\"]} desc={messages[\"wizard.step-desc-2\"]}>\r\n                                <div className=\"wizard-basic-step\">\r\n                                    <Form>\r\n                                        <FormGroup>\r\n                                            <Label>\r\n                                                <IntlMessages id=\"forms.email\" />\r\n                                            </Label>\r\n                                            <Input type=\"email\" name=\"email\" placeholder={messages[\"forms.email\"]} value={this.state.email} onChange={(e) => { this.setState({ email: e.target.value }) }} />\r\n                                        </FormGroup>\r\n                                    </Form>\r\n                                </div>\r\n\r\n                            </Step>\r\n                            <Step id=\"step3\" name={messages[\"wizard.step-name-3\"]} desc={messages[\"wizard.step-desc-3\"]}>\r\n\r\n                                <div className=\"wizard-basic-step\">\r\n                                    <Form>\r\n                                        <FormGroup>\r\n                                            <Label>\r\n                                                <IntlMessages id=\"forms.password\" />\r\n                                            </Label>\r\n                                            <Input type=\"password\" name=\"password\" placeholder={messages[\"forms.password\"]} value={this.state.password} onChange={(e) => { this.setState({ password: e.target.value }) }} />\r\n                                        </FormGroup>\r\n                                    </Form>\r\n                                </div>\r\n\r\n                            </Step>\r\n                            <Step id=\"step4\" hideTopNav={true}>\r\n                                <div className=\"wizard-basic-step text-center\">\r\n                                    <h2 className=\"mb-2\"><IntlMessages id=\"wizard.content-thanks\" /></h2>\r\n                                    <p><IntlMessages id=\"wizard.registered\" /></p>\r\n                                </div>\r\n                            </Step>\r\n                        </Steps>\r\n                        <BottomNavigation onClickNext={this.onClickNext} onClickPrev={this.onClickPrev} className={\"justify-content-center \" + (this.state.bottomNavHidden && \"invisible\")} prevLabel={messages[\"wizard.prev\"]} nextLabel={messages[\"wizard.next\"]} />\r\n                    </Wizard>\r\n                </CardBody>\r\n            </Card>\r\n\r\n        );\r\n    }\r\n}\r\nexport default injectIntl(LastStepEnd)\r\n","import React, { Component } from \"react\";\r\nimport { Card, CardBody, Form, FormGroup, Input, Label } from \"reactstrap\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\nimport { Wizard, Steps, Step } from 'react-albus';\r\nimport { injectIntl } from 'react-intl';\r\nimport { BottomNavigation } from \"../../components/wizard/BottomNavigation\";\r\nimport { TopNavigation } from \"../../components/wizard/TopNavigation\";\r\n\r\nclass TopNavDisabled extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onClickNext = this.onClickNext.bind(this);\r\n    this.onClickPrev = this.onClickPrev.bind(this);\r\n    this.topNavClick = this.topNavClick.bind(this);\r\n    this.state = {\r\n      name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    }\r\n  }\r\n\r\n  topNavClick(stepItem, push) {\r\n    push(stepItem.id);\r\n  }\r\n\r\n  onClickNext(goToNext, steps, step) {\r\n    step.isDone = true;\r\n    if (steps.length - 1 <= steps.indexOf(step)) {\r\n      return;\r\n    }\r\n    goToNext();\r\n  }\r\n\r\n  onClickPrev(goToPrev, steps, step) {\r\n    if (steps.indexOf(step) <= 0) {\r\n      return;\r\n    }\r\n    goToPrev();\r\n  }\r\n\r\n  render() {\r\n    const { messages } = this.props.intl;\r\n    return (\r\n      <Card>\r\n        <CardBody className=\"wizard wizard-default\">\r\n          <Wizard>\r\n            <TopNavigation className=\"justify-content-center\" disableNav={true} topNavClick={this.topNavClick} />\r\n            <Steps>\r\n              <Step id=\"step1\" name={messages[\"wizard.step-name-1\"]} desc={messages[\"wizard.step-desc-1\"]}>\r\n                <div className=\"wizard-basic-step\">\r\n                  <Form>\r\n                    <FormGroup>\r\n                      <Label>\r\n                        <IntlMessages id=\"forms.name\" />\r\n                      </Label>\r\n                      <Input type=\"text\" name=\"name\" placeholder={messages[\"forms.name\"]} value={this.state.name} onChange={(e) => { this.setState({ name: e.target.value }) }} />\r\n                    </FormGroup>\r\n                  </Form>\r\n                </div>\r\n              </Step>\r\n              <Step id=\"step2\" name={messages[\"wizard.step-name-2\"]} desc={messages[\"wizard.step-desc-2\"]}>\r\n                <div className=\"wizard-basic-step\">\r\n                  <Form>\r\n                    <FormGroup>\r\n                      <Label>\r\n                        <IntlMessages id=\"forms.email\" />\r\n                      </Label>\r\n                      <Input type=\"email\" name=\"email\" placeholder={messages[\"forms.email\"]} value={this.state.email} onChange={(e) => { this.setState({ email: e.target.value }) }} />\r\n                    </FormGroup>\r\n                  </Form>\r\n                </div>\r\n\r\n              </Step>\r\n              <Step id=\"step3\" name={messages[\"wizard.step-name-3\"]} desc={messages[\"wizard.step-desc-3\"]}>\r\n\r\n                <div className=\"wizard-basic-step\">\r\n                  <Form>\r\n                    <FormGroup>\r\n                      <Label>\r\n                        <IntlMessages id=\"forms.password\" />\r\n                      </Label>\r\n                      <Input type=\"password\" name=\"password\" placeholder={messages[\"forms.password\"]} value={this.state.password} onChange={(e) => { this.setState({ password: e.target.value }) }} />\r\n                    </FormGroup>\r\n                  </Form>\r\n                </div>\r\n\r\n              </Step>\r\n              <Step id=\"step4\" hideTopNav={true}>\r\n                <div className=\"wizard-basic-step text-center\">\r\n                  <h2 className=\"mb-2\"><IntlMessages id=\"wizard.content-thanks\" /></h2>\r\n                  <p><IntlMessages id=\"wizard.registered\" /></p>\r\n              </div>\r\n              </Step>\r\n            </Steps>\r\n            <BottomNavigation onClickNext={this.onClickNext} onClickPrev={this.onClickPrev} className=\"justify-content-center\" prevLabel={messages[\"wizard.prev\"]} nextLabel={messages[\"wizard.next\"]}/>\r\n          </Wizard>\r\n        </CardBody>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\nexport default injectIntl(TopNavDisabled)\r\n","import React, { Component } from \"react\";\r\nimport { Card, CardBody, FormGroup, Label, Spinner } from \"reactstrap\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\nimport { Wizard, Steps, Step } from 'react-albus';\r\nimport { injectIntl } from 'react-intl';\r\nimport { BottomNavigation } from \"../../components/wizard/BottomNavigation\";\r\nimport { TopNavigation } from \"../../components/wizard/TopNavigation\";\r\nimport { Formik, Form, Field } from \"formik\";\r\n\r\n\r\nclass Validation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onClickNext = this.onClickNext.bind(this);\r\n        this.onClickPrev = this.onClickPrev.bind(this);\r\n        this.validateEmail = this.validateEmail.bind(this);\r\n        this.validateName = this.validateName.bind(this);\r\n        this.validatePassword = this.validatePassword.bind(this);\r\n\r\n        this.form0 = React.createRef();\r\n        this.form1 = React.createRef();\r\n        this.form2 = React.createRef();\r\n\r\n        this.state = {\r\n            bottomNavHidden: false,\r\n            topNavDisabled: false,\r\n            loading: false,\r\n            fields: [\r\n                {\r\n                    valid: false,\r\n                    name: \"name\",\r\n                    value: \"\"\r\n                },\r\n                {\r\n                    valid: false,\r\n                    name: \"email\",\r\n                    value: \"\"\r\n                },\r\n                {\r\n                    valid: false,\r\n                    name: \"password\",\r\n                    value: \"\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ fields: [{ ...this.state.fields[0], form: this.form0 }, { ...this.state.fields[1], form: this.form1 }, { ...this.state.fields[2], form: this.form2 }] });\r\n    }\r\n\r\n    validateEmail(value) {\r\n        let error;\r\n        if (!value) {\r\n            error = \"Please enter your email address\";\r\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n            error = \"Invalid email address\";\r\n        }\r\n        return error;\r\n    }\r\n\r\n    validateName(value) {\r\n        let error;\r\n        if (!value) {\r\n            error = \"Please enter your name\";\r\n        } else if (value.length < 2) {\r\n            error = \"Value must be longer than 2 characters\";\r\n        }\r\n        return error;\r\n    }\r\n\r\n    validatePassword(value) {\r\n        let error;\r\n        if (!value) {\r\n            error = \"Please enter your password\";\r\n        } else if (value.length < 6) {\r\n            error = \"Password must be longer than 6 characters\";\r\n        }\r\n        return error;\r\n    }\r\n\r\n    hideNavigation() {\r\n        this.setState({ bottomNavHidden: true, topNavDisabled: true });\r\n    }\r\n\r\n    asyncLoading () {\r\n        this.setState({ loading: true });\r\n        setTimeout(() => {\r\n            this.setState({ loading: false });\r\n        }, 3000);\r\n    }\r\n\r\n    onClickNext(goToNext, steps, step) {\r\n        if (steps.length - 1 <= steps.indexOf(step)) {\r\n            return;\r\n        }\r\n        let formIndex = steps.indexOf(step);\r\n        let form = this.state.fields[formIndex].form.current;\r\n        let name = this.state.fields[formIndex].name;\r\n        form.submitForm().then(() => {\r\n            let fields = this.state.fields;\r\n            fields[formIndex].value = form.state.values[name];\r\n            fields[formIndex].valid = form.state.errors[name] ? false : true;\r\n            this.setState({ fields });\r\n            if (!form.state.errors[name]) {\r\n                goToNext();\r\n                step.isDone = true;\r\n                if (steps.length - 2 <= steps.indexOf(step)) {\r\n                    this.hideNavigation();\r\n                    this.asyncLoading();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    onClickPrev(goToPrev, steps, step) {\r\n        if (steps.indexOf(step) <= 0) {\r\n            return;\r\n        }\r\n        goToPrev();\r\n    }\r\n\r\n    render() {\r\n        const { messages } = this.props.intl;\r\n        return (\r\n            <Card>\r\n                <CardBody className=\"wizard wizard-default\">\r\n                    <Wizard>\r\n                        <TopNavigation className=\"justify-content-center\" disableNav={true} />\r\n                        <Steps>\r\n                            <Step id=\"step1\" name={messages[\"wizard.step-name-1\"]} desc={messages[\"wizard.step-desc-1\"]}>\r\n                                <div className=\"wizard-basic-step\">\r\n                                    <Formik\r\n                                        ref={this.form0}\r\n                                        initialValues={{\r\n                                            name: this.state.fields[0].value\r\n                                        }}\r\n                                        onSubmit={() => { }}>\r\n                                        {({ errors, touched }) => (\r\n                                            <Form className=\"av-tooltip tooltip-label-right\">\r\n                                                <FormGroup>\r\n                                                    <Label>{messages[\"forms.name\"]}</Label>\r\n                                                    <Field\r\n                                                        className=\"form-control\"\r\n                                                        name=\"name\"\r\n                                                        validate={this.validateName}\r\n                                                    />\r\n                                                    {errors.name && touched.name && (\r\n                                                        <div className=\"invalid-feedback d-block\">\r\n                                                            {errors.name}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </FormGroup>\r\n                                            </Form>\r\n                                        )}\r\n                                    </Formik>\r\n                                </div>\r\n                            </Step>\r\n                            <Step id=\"step2\" name={messages[\"wizard.step-name-2\"]} desc={messages[\"wizard.step-desc-2\"]}>\r\n                                <div className=\"wizard-basic-step\">\r\n                                    <Formik\r\n                                        ref={this.form1}\r\n                                        initialValues={{\r\n                                            email: this.state.fields[1].value\r\n                                        }}\r\n                                        onSubmit={() => { }}>\r\n                                        {({ errors, touched }) => (\r\n                                            <Form className=\"av-tooltip tooltip-label-right\">\r\n                                                <FormGroup>\r\n                                                    <Label>{messages[\"forms.email\"]}</Label>\r\n                                                    <Field\r\n                                                        className=\"form-control\"\r\n                                                        name=\"email\"\r\n                                                        validate={this.validateEmail}\r\n                                                    />\r\n                                                    {errors.email && touched.email && (\r\n                                                        <div className=\"invalid-feedback d-block\">\r\n                                                            {errors.email}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </FormGroup>\r\n                                            </Form>\r\n                                        )}\r\n                                    </Formik>\r\n                                </div>\r\n                            </Step>\r\n                            <Step id=\"step3\" name={messages[\"wizard.step-name-3\"]} desc={messages[\"wizard.step-desc-3\"]}>\r\n                                <div className=\"wizard-basic-step\">\r\n                                    <Formik\r\n                                        ref={this.form2}\r\n                                        initialValues={{\r\n                                            password: this.state.fields[2].value\r\n                                        }}\r\n                                        onSubmit={() => { }}>\r\n                                        {({ errors, touched }) => (\r\n                                            <Form className=\"av-tooltip tooltip-label-right error-l-75\">\r\n                                                <FormGroup>\r\n                                                    <Label>{messages[\"forms.password\"]}</Label>\r\n                                                    <Field\r\n                                                        className=\"form-control\"\r\n                                                        name=\"password\"\r\n                                                        validate={this.validatePassword}\r\n                                                    />\r\n                                                    {errors.password && touched.password && (\r\n                                                        <div className=\"invalid-feedback d-block\">\r\n                                                            {errors.password}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </FormGroup>\r\n                                            </Form>\r\n                                        )}\r\n                                    </Formik>\r\n                                </div>\r\n                            </Step>\r\n                            <Step id=\"step4\" hideTopNav={true}>\r\n                                <div className=\"wizard-basic-step text-center pt-3\">\r\n                                    {\r\n                                        this.state.loading ? (\r\n                                            <div>\r\n                                                <Spinner color=\"primary\" className=\"mb-1\" />\r\n                                                <p><IntlMessages id=\"wizard.async\" /></p>\r\n                                            </div>\r\n                                        ) : (\r\n                                                <div>\r\n                                                    <h2 className=\"mb-2\"><IntlMessages id=\"wizard.content-thanks\" /></h2>\r\n                                                    <p><IntlMessages id=\"wizard.registered\" /></p>\r\n                                                </div>\r\n                                            )\r\n                                    }\r\n                                </div>\r\n                            </Step>\r\n                        </Steps>\r\n                        <BottomNavigation onClickNext={this.onClickNext} onClickPrev={this.onClickPrev} className={\"justify-content-center \" + (this.state.bottomNavHidden && \"invisible\")} prevLabel={messages[\"wizard.prev\"]} nextLabel={messages[\"wizard.next\"]} />\r\n                    </Wizard>\r\n                </CardBody>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\nexport default injectIntl(Validation)\r\n","import React, { Component } from \"react\";\r\nimport { Card, CardBody, Row } from \"reactstrap\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\nimport { Wizard, Steps, Step } from 'react-albus';\r\nimport { injectIntl } from 'react-intl';\r\nimport { BottomNavigation } from \"../../components/wizard/BottomNavigation\";\r\nimport { TopNavigation } from \"../../components/wizard/TopNavigation\";\r\nimport { Colxx } from \"../../components/common/CustomBootstrap\";\r\n\r\nclass Layouts extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onClickNext = this.onClickNext.bind(this);\r\n    this.onClickPrev = this.onClickPrev.bind(this);\r\n    this.topNavClick = this.topNavClick.bind(this);\r\n  }\r\n\r\n  topNavClick(stepItem, push) {\r\n    push(stepItem.id);\r\n  }\r\n\r\n  onClickNext(goToNext, steps, step) {\r\n    step.isDone = true;\r\n    if (steps.length - 1 <= steps.indexOf(step)) {\r\n      return;\r\n    }\r\n    goToNext();\r\n  }\r\n\r\n  onClickPrev(goToPrev, steps, step) {\r\n    if (steps.indexOf(step) <= 0) {\r\n      return;\r\n    }\r\n    goToPrev();\r\n  }\r\n\r\n  render() {\r\n    const { messages } = this.props.intl;\r\n    return (\r\n      <Row>\r\n        <Colxx xxs=\"12\" xl=\"6\" className=\"mb-5\">\r\n          <Card>\r\n            <CardBody className=\"wizard wizard-default\">\r\n              <Wizard>\r\n                <TopNavigation className=\"justify-content-between\" disableNav={false} topNavClick={this.topNavClick} />\r\n                <Steps>\r\n                  <Step id=\"step1\" name={messages[\"wizard.step-name-1\"]} desc={messages[\"wizard.step-desc-1\"]}>\r\n                    <div className=\"wizard-basic-step text-center\">\r\n                      <p><IntlMessages id=\"wizard.content-1\" /></p>\r\n                    </div>\r\n                  </Step>\r\n                  <Step id=\"step2\" name={messages[\"wizard.step-name-2\"]} desc={messages[\"wizard.step-desc-2\"]}>\r\n                    <div className=\"wizard-basic-step text-center\">\r\n                      <p><IntlMessages id=\"wizard.content-2\" /></p>\r\n                    </div>\r\n                  </Step>\r\n                  <Step id=\"step3\" name={messages[\"wizard.step-name-3\"]} desc={messages[\"wizard.step-desc-3\"]} hideTopNav={true}>\r\n                    <div className=\"wizard-basic-step text-center\">\r\n                      <h2 className=\"mb-2\"><IntlMessages id=\"wizard.content-thanks\" /></h2>\r\n                      <p><IntlMessages id=\"wizard.content-3\" /></p>\r\n                    </div>\r\n                  </Step>\r\n                </Steps>\r\n                <BottomNavigation onClickNext={this.onClickNext} onClickPrev={this.onClickPrev} className=\"justify-content-between\" prevLabel={messages[\"wizard.prev\"]} nextLabel={messages[\"wizard.next\"]} />\r\n              </Wizard>\r\n            </CardBody>\r\n          </Card>\r\n        </Colxx>\r\n        <Colxx xxs=\"12\" xl=\"6\">\r\n          <Card>\r\n            <CardBody className=\"wizard wizard-default\">\r\n              <Wizard>\r\n                <TopNavigation className=\"justify-content-start\" disableNav={false} topNavClick={this.topNavClick} />\r\n                <Steps>\r\n                <Step id=\"step1\" name={messages[\"wizard.step-name-1\"]} desc={messages[\"wizard.step-desc-1\"]}>\r\n                    <div className=\"wizard-basic-step\">\r\n                      <p><IntlMessages id=\"wizard.content-1\" /></p>\r\n                    </div>\r\n                  </Step>\r\n                  <Step id=\"step2\" name={messages[\"wizard.step-name-2\"]} desc={messages[\"wizard.step-desc-2\"]}>\r\n                    <div className=\"wizard-basic-step\">\r\n                      <p><IntlMessages id=\"wizard.content-2\" /></p>\r\n                    </div>\r\n                  </Step>\r\n                  <Step id=\"step3\" name={messages[\"wizard.step-name-3\"]} desc={messages[\"wizard.step-desc-3\"]} hideTopNav={true}>\r\n                    <div className=\"wizard-basic-step\">\r\n                      <h2 className=\"mb-2\"><IntlMessages id=\"wizard.content-thanks\" /></h2>\r\n                      <p><IntlMessages id=\"wizard.content-3\" /></p>\r\n                    </div>\r\n                  </Step>\r\n                </Steps>\r\n                <BottomNavigation onClickNext={this.onClickNext} onClickPrev={this.onClickPrev} className=\"justify-content-start\" prevLabel={messages[\"wizard.prev\"]} nextLabel={messages[\"wizard.next\"]} />\r\n              </Wizard>\r\n            </CardBody>\r\n          </Card>\r\n        </Colxx>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\nexport default injectIntl(Layouts)\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { Row } from \"reactstrap\";\r\nimport { Colxx, Separator } from \"../../../../components/common/CustomBootstrap\";\r\nimport Breadcrumb from \"../../../../containers/navs/Breadcrumb\";\r\nimport { injectIntl } from 'react-intl';\r\nimport Basic from \"../../../../containers/wizard/Basic\";\r\nimport LastStepEnd from \"../../../../containers/wizard/LastStepEnd\";\r\nimport TopNavDisabled from \"../../../../containers/wizard/TopNavDisabled\";\r\nimport Validation from \"../../../../containers/wizard/Validation\";\r\nimport Layouts from \"../../../../containers/wizard/Layouts\";\r\n\r\nclass FormWizard extends Component {\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <Row>\r\n          <Colxx xxs=\"12\">\r\n            <Breadcrumb\r\n              heading=\"menu.form-wizard\"\r\n              match={this.props.match}\r\n            />\r\n            <Separator className=\"mb-5\" />\r\n          </Colxx>\r\n        </Row>\r\n        <Row>\r\n          <Colxx xxs=\"12\" className=\"mb-5\">\r\n            <h5 className=\"mb-4\">Basic</h5>\r\n            <Basic />\r\n          </Colxx>\r\n          <Colxx xxs=\"12\" className=\"mb-5\">\r\n            <h5 className=\"mb-4\">Last Step End</h5>\r\n            <LastStepEnd />\r\n          </Colxx>\r\n          <Colxx xxs=\"12\" className=\"mb-5\">\r\n            <h5 className=\"mb-4\">Top Navigation Disabled</h5>\r\n            <TopNavDisabled />\r\n          </Colxx>\r\n          <Colxx xxs=\"12\" className=\"mb-5\">\r\n            <h5 className=\"mb-4\">Validation</h5>\r\n            <Validation />\r\n          </Colxx>\r\n          <Colxx xxs=\"12\" className=\"mb-5\">\r\n            <h5 className=\"mb-4\">Layouts</h5>\r\n            <Layouts />\r\n          </Colxx>\r\n        </Row>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\nexport default injectIntl(FormWizard)\r\n","import React from 'react';\r\nimport { Col } from 'reactstrap';\r\nconst Colxx = (props) => (\r\n    <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\r\n);\r\nconst Separator = (props) => (\r\n    <div className={`separator ${props.className}`}></div>\r\n);\r\nexport { Colxx,Separator }","import React, { Fragment } from \"react\";\r\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\n\r\nconst getMenuTitle = sub => {\r\n  return <IntlMessages id={`menu.${sub}`} />;\r\n};\r\n\r\nconst getUrl = (path, sub, index) => {\r\n  if (index === 0) {\r\n    return \"\";\r\n  } else {\r\n    return path.split(sub)[0] + sub;\r\n  }\r\n};\r\n\r\nconst BreadcrumbContainer = ({ heading, match }) => {\r\n  return (\r\n    <Fragment>\r\n      {heading && <h1><IntlMessages id={heading}/></h1>}\r\n      <BreadcrumbItems match={match} />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport const BreadcrumbItems = ({ match }) => {\r\n  const path = match.path.substr(1);\r\n  let paths = path.split(\"/\");\r\n  if (paths[paths.length - 1].indexOf(\":\") > -1) {\r\n    paths = paths.filter(x => x.indexOf(\":\") === -1);\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\r\n        {paths.map((sub, index) => {\r\n          return (\r\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\r\n              {paths.length !== index + 1 ? (\r\n                <NavLink to={\"/\" + getUrl(path, sub, index)}>\r\n                  {getMenuTitle(sub)}\r\n                </NavLink>\r\n              ) : (\r\n                getMenuTitle(sub)\r\n              )}\r\n            </BreadcrumbItem>\r\n          );\r\n        })}\r\n      </Breadcrumb>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default BreadcrumbContainer;\r\n"],"sourceRoot":""}