{"version":3,"sources":["components/common/CustomBootstrap.js","views/app/dashboards/connect.js"],"names":["Colxx","props","widths","Separator","className","ConnectDashboard","Yup","shape","checkboxCustomSingle","oneOf","handleSubmit","bind","event","errors","values","console","log","length","window","location","href","this","intl","messages","xxs","size","aria-label","listClassName","active","disabled","onSubmit","name","label","type","validate","required","value","errorMessage","pattern","minLength","maxLength","xs","addonType","min","color","style","marginTop","inline","customInput","display","alignItems","justifyContent","Component","connectObj","injectIntl"],"mappings":"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","file":"static/js/dashboard-connect.61595e1d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Col } from 'reactstrap';\r\nconst Colxx = (props) => (\r\n    <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\r\n);\r\nconst Separator = (props) => (\r\n    <div className={`separator ${props.className}`}></div>\r\n);\r\nexport { Colxx,Separator }","import React, {Component, Fragment} from 'react';\r\nimport {injectIntl} from 'react-intl';\r\nimport {\r\n    Alert,\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardTitle,\r\n    InputGroupAddon,\r\n    Label,\r\n    Pagination,\r\n    PaginationItem,\r\n    PaginationLink,\r\n    Row\r\n} from 'reactstrap';\r\nimport {Colxx, Separator} from '../../../components/common/CustomBootstrap';\r\nimport * as Yup from \"yup\";\r\nimport {AvCheckbox, AvCheckboxGroup, AvField, AvForm, AvGroup} from \"availity-reactstrap-validation\";\r\n\r\nconst SignupSchema = Yup.object().shape({\r\n    checkboxCustomSingle: Yup.bool().oneOf([true], \"Must agree to this\"),\r\n});\r\n\r\n\r\nclass ConnectDashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit (event, errors, values){\r\n        console.log(values);\r\n        if (errors.length === 0) {\r\n            window.location.href = '/app/dashboards/summary';\r\n        }\r\n        return values;\r\n    };\r\n\r\n    render() {\r\n        const {messages} = this.props.intl;\r\n        return (\r\n            <Fragment>\r\n                {/* Page Navigation */}\r\n                <Row>\r\n                    <Colxx xxs=\"12\">\r\n                        <Pagination\r\n                            size=\"sm\"\r\n                            aria-label=\"Page navigation example\"\r\n                            listClassName=\"justify-content-center\"\r\n                        >\r\n                            <PaginationItem>\r\n                                <PaginationLink className=\"prev\" href=\"upload\">\r\n                                    <i className=\"simple-icon-arrow-left\"/>\r\n                                </PaginationLink>\r\n                            </PaginationItem>\r\n                            <PaginationItem>\r\n                                <PaginationLink href=\"overview\">1</PaginationLink>\r\n                            </PaginationItem>\r\n                            <PaginationItem>\r\n                                <PaginationLink href=\"generate\">2</PaginationLink>\r\n                            </PaginationItem>\r\n                            <PaginationItem>\r\n                                <PaginationLink href=\"upload\">3</PaginationLink>\r\n                            </PaginationItem>\r\n                            <PaginationItem active>\r\n                                <PaginationLink href=\"#\">4</PaginationLink>\r\n                            </PaginationItem>\r\n                            <PaginationItem disabled>\r\n                                <PaginationLink href=\"summary\">5</PaginationLink>\r\n                            </PaginationItem>\r\n                            {/*\r\n                            <PaginationItem disabled>\r\n                                <PaginationLink className=\"next\" href=\"#\">\r\n                                    <i className=\"simple-icon-arrow-right\"/>\r\n                                </PaginationLink>\r\n                            </PaginationItem>\r\n                            */}\r\n                        </Pagination>\r\n                    </Colxx>\r\n                </Row>\r\n\r\n                {/* Header */}\r\n                <Row>\r\n                    <Colxx xxs=\"12\">\r\n                        <h2>\r\n                            Connect wallet\r\n                        </h2>\r\n                        <Separator className=\"mb-5\"/>\r\n                    </Colxx>\r\n                </Row>\r\n\r\n                {/* Connect */}\r\n                <Row className=\"mb-4\">\r\n                    <Colxx xxs=\"12\">\r\n                        <Card>\r\n                            <CardBody>\r\n                                <AvForm\r\n                                    className=\"av-tooltip tooltip-label-right\"\r\n                                    onSubmit={this.handleSubmit}>\r\n\r\n                                    {/* Wallet address */}\r\n                                    <Row>\r\n                                        <Colxx>\r\n                                            <CardTitle>\r\n                                                1. Enter receiving wallet address\r\n                                            </CardTitle>\r\n                                            {/*\r\n                                            <p>Enter the receiving wallet adress here. Do not copy/paste\r\n                                                the link.</p>\r\n                                            */}\r\n\r\n                                            <AvField name=\"address\" label=\"Enter the receiving wallet adress here. Do not copy/paste\r\n                                                the link.\" type=\"text\" validate={{\r\n                                                required: {value: true, errorMessage: 'Please enter an address'},\r\n                                                pattern: {value: '^[A-Za-z0-9]+$', errorMessage: 'The address must be composed only with letter and numbers'},\r\n                                                minLength: {value: 42, errorMessage: 'Invalid address. The address must be 42 characters'},\r\n                                                maxLength: {value: 42, errorMessage: 'Invalid address. The address must be 42 characters'}\r\n                                            }} />\r\n                                        </Colxx>\r\n                                    </Row>\r\n\r\n                                    {/* Amount */}\r\n                                    <Row>\r\n                                        <Colxx>\r\n                                            <CardTitle>\r\n                                                2. Enter amount of Ether\r\n                                            </CardTitle>\r\n\r\n                                            <Label>Enter the amount of ether you would like to transfer. It should\r\n                                                be 32 times the amount of validations.</Label>\r\n                                            <AvGroup className=\"error-t-negative\">\r\n                                                <Row>\r\n                                                    <Colxx xs={1}>\r\n                                                        <InputGroupAddon addonType=\"prepend\">ETH</InputGroupAddon>\r\n                                                    </Colxx>\r\n\r\n                                                    <Colxx xs={11}>\r\n                                                        <AvField\r\n                                                            name=\"minPropNumberProp\"\r\n                                                            type=\"text\"\r\n                                                            validate={{\r\n                                                                min: {value: 32, errorMessage: \"Minimum 32 ETH\"},\r\n                                                                required: {\r\n                                                                    value: true,\r\n                                                                    errorMessage: \"Please enter a number\"\r\n                                                                }\r\n                                                            }}\r\n                                                        />\r\n                                                    </Colxx>\r\n                                                </Row>\r\n                                            </AvGroup>\r\n                                        </Colxx>\r\n                                    </Row>\r\n\r\n                                    {/* Private Key */}\r\n                                    <Row>\r\n                                        <Colxx>\r\n                                            <CardTitle>\r\n                                                3. Enter your private key\r\n                                            </CardTitle>\r\n                                            {/*\r\n                                            <p>Enter the private key to the wallet which you are sending the Ether\r\n                                                from.</p>\r\n                                            */}\r\n\r\n                                            <AvField name=\"private-key\" label=\"Enter the private key to the wallet which you are sending the Ether\r\n                                                from.\" type=\"text\" validate={{\r\n                                                required: {value: true, errorMessage: 'Please enter your private key'},\r\n                                                pattern: {value: '^[A-Za-z0-9]+$', errorMessage: 'The private key must be composed only with letter and numbers'},\r\n                                                minLength: {value: 64, errorMessage: 'Invalid private key. The key must be 64 characters'},\r\n                                                maxLength: {value: 64, errorMessage: 'Invalid private key. The key must be 64 characters'}\r\n                                            }} />\r\n                                        </Colxx>\r\n                                    </Row>\r\n\r\n\r\n                                    <Alert color=\"danger\" style={{marginTop: 50}}>\r\n                                        <Row>\r\n                                            <div className={\"glyph-icon simple-icon-exclamation\"}/>\r\n                                            &nbsp;&nbsp;&nbsp;&nbsp;Please make sure you are not being\r\n                                            phished!\r\n                                        </Row>\r\n                                    </Alert>\r\n\r\n                                    <span>\r\n                                        You are responsible for the transaction. Fraudulent websites might\r\n                                        lure you into sending the Ether to them instead of the official deposit\r\n                                        contract. Please check that the address you are sending the transaction\r\n                                        to is the correct address.\r\n                                        <br/>\r\n                                        <br/>\r\n                                    </span>\r\n\r\n\r\n                                    <AvCheckboxGroup\r\n                                        className=\"error-l-150\"\r\n                                        inline\r\n                                        name=\"checkboxCustomInputExample2\"\r\n                                        required>\r\n                                        <AvCheckbox customInput label=\"I have confirmed that I am sending Ether to\r\n                                        the correct address.\" value=\"Yes\"/>\r\n                                    </AvCheckboxGroup>\r\n\r\n                                    {/* Next step button */}\r\n                                    <div style={{\r\n                                        display: 'flex',\r\n                                        alignItems: 'center',\r\n                                        justifyContent: 'center',\r\n                                    }}>\r\n                                        <Row>\r\n                                            <Colxx>\r\n                                                <Button color=\"primary\" type=\"submit\" size=\"lg\"\r\n                                                        className=\"mb-2\">\r\n                                                    CONTINUE TO SUMMARY\r\n                                                </Button>\r\n                                            </Colxx>\r\n                                        </Row>\r\n                                    </div>\r\n                                </AvForm>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Colxx>\r\n                </Row>\r\n\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const connectObj = new ConnectDashboard();\r\n//export const exportValues = inputValues;\r\n\r\nexport default injectIntl(ConnectDashboard);\r\n"],"sourceRoot":""}