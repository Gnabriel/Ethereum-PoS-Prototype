{"version":3,"sources":["views/app/ui/components/editors.js","components/common/CustomBootstrap.js","containers/navs/Breadcrumb.js"],"names":["quillModules","toolbar","list","indent","quillFormats","EditorsUi","props","handleChangeQuillStandart","textQuillStandart","setState","handleChangeQuillBubble","textQuillBubble","state","xxs","heading","match","this","className","id","theme","value","onChange","modules","formats","Component","Colxx","widths","Separator","getMenuTitle","sub","getUrl","path","index","split","BreadcrumbItems","substr","paths","length","indexOf","filter","x","map","key","active","to","BreadcrumbContainer"],"mappings":"oTAWMA,G,gBAAe,CACnBC,QAAS,CACP,CAAC,OAAQ,SAAU,YAAa,SAAU,cAC1C,CACE,CAAEC,KAAM,WACR,CAAEA,KAAM,UACR,CAAEC,OAAQ,MACV,CAAEA,OAAQ,OAEZ,CAAC,OAAQ,SACT,CAAC,YAICC,EAAe,CACnB,SACA,OACA,SACA,YACA,SACA,aACA,OACA,SACA,SACA,OACA,SAGmBC,E,YACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAORC,0BAA4B,SAACC,GAC3B,EAAKC,SAAS,CAAED,uBATD,EAYjBE,wBAA0B,SAACC,GACzB,EAAKF,SAAS,CAAEE,qBAXhB,EAAKC,MAAQ,CACXD,gBAAiB,GACjBH,kBAAmB,IAJN,E,sEAiBnB,OACE,kBAAC,WAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOK,IAAI,MACT,kBAAC,IAAD,CAAYC,QAAQ,eAAeC,MAAOC,KAAKV,MAAMS,QACrD,kBAAC,IAAD,CAAWE,UAAU,WAGzB,kBAAC,IAAD,CAAKA,UAAU,QACb,kBAAC,IAAD,CAAOJ,IAAI,MACT,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAcK,GAAG,4BAEnB,kBAAC,IAAD,CACEC,MAAM,OACNC,MAAOJ,KAAKJ,MAAMJ,kBAClBa,SAAUL,KAAKT,0BACfe,QAAStB,EACTuB,QAASnB,QAMnB,kBAAC,IAAD,CAAKa,UAAU,QACb,kBAAC,IAAD,CAAOJ,IAAI,MACT,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAcK,GAAG,0BAEnB,kBAAC,IAAD,CACEC,MAAM,SACNC,MAAOJ,KAAKJ,MAAMD,gBAClBU,SAAUL,KAAKN,mC,GAtDMc,c,iCCvCvC,iGAEMC,EAAQ,SAACnB,GAAD,OACV,kBAAC,IAAD,iBAASA,EAAT,CAAgBoB,OAAQ,CAAC,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,WAE5DC,EAAY,SAACrB,GAAD,OACd,yBAAKW,UAAS,oBAAeX,EAAMW,e,iCCNvC,wDAKMW,EAAe,SAAAC,GACnB,OAAO,kBAAC,IAAD,CAAcX,GAAE,eAAUW,MAG7BC,EAAS,SAACC,EAAMF,EAAKG,GACzB,OAAc,IAAVA,EACK,GAEAD,EAAKE,MAAMJ,GAAK,GAAKA,GAanBK,EAAkB,SAAC,GAAe,IACvCH,EADsC,EAAZhB,MACbgB,KAAKI,OAAO,GAC3BC,EAAQL,EAAKE,MAAM,KAIvB,OAHIG,EAAMA,EAAMC,OAAS,GAAGC,QAAQ,MAAQ,IAC1CF,EAAQA,EAAMG,QAAO,SAAAC,GAAC,OAAwB,IAApBA,EAAEF,QAAQ,SAGpC,kBAAC,WAAD,KACE,kBAAC,IAAD,CAAYrB,UAAU,iEACnBmB,EAAMK,KAAI,SAACZ,EAAKG,GACf,OACE,kBAAC,IAAD,CAAgBU,IAAKV,EAAOW,OAAQP,EAAMC,SAAWL,EAAQ,GAC1DI,EAAMC,SAAWL,EAAQ,EACxB,kBAAC,IAAD,CAASY,GAAI,IAAMd,EAAOC,EAAMF,EAAKG,IAClCJ,EAAaC,IAGhBD,EAAaC,UAUdgB,IApCa,SAAC,GAAwB,IAAtB/B,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACtC,OACE,kBAAC,WAAD,KACGD,GAAW,4BAAI,kBAAC,IAAD,CAAcI,GAAIJ,KAClC,kBAACoB,EAAD,CAAiBnB,MAAOA","file":"static/js/components-editors.6f2f8121.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport { Row, Card, CardBody, CardTitle } from \"reactstrap\";\r\nimport { Colxx, Separator } from \"../../../../components/common/CustomBootstrap\";\r\nimport Breadcrumb from \"../../../../containers/navs/Breadcrumb\";\r\nimport IntlMessages from \"../../../../helpers/IntlMessages\";\r\n\r\n\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\";\r\nimport 'react-quill/dist/quill.bubble.css';\r\n\r\nconst quillModules = {\r\n  toolbar: [\r\n    [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\"],\r\n    [\r\n      { list: \"ordered\" },\r\n      { list: \"bullet\" },\r\n      { indent: \"-1\" },\r\n      { indent: \"+1\" }\r\n    ],\r\n    [\"link\", \"image\"],\r\n    [\"clean\"]\r\n  ]\r\n};\r\n\r\nconst quillFormats = [\r\n  \"header\",\r\n  \"bold\",\r\n  \"italic\",\r\n  \"underline\",\r\n  \"strike\",\r\n  \"blockquote\",\r\n  \"list\",\r\n  \"bullet\",\r\n  \"indent\",\r\n  \"link\",\r\n  \"image\"\r\n];\r\n\r\nexport default class EditorsUi extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          textQuillBubble: \"\",\r\n          textQuillStandart: \"\",\r\n        };\r\n      }\r\n    \r\n      handleChangeQuillStandart = (textQuillStandart) => {\r\n        this.setState({ textQuillStandart });\r\n      }\r\n    \r\n      handleChangeQuillBubble = (textQuillBubble) => {\r\n        this.setState({ textQuillBubble });\r\n      }\r\n    \r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <Row>\r\n          <Colxx xxs=\"12\">\r\n            <Breadcrumb heading=\"menu.editors\" match={this.props.match} />\r\n            <Separator className=\"mb-5\" />\r\n          </Colxx>\r\n        </Row>\r\n        <Row className=\"mb-4\">\r\n          <Colxx xxs=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <CardTitle>\r\n                  <IntlMessages id=\"editors.quill-standart\" />\r\n                </CardTitle>\r\n                <ReactQuill\r\n                  theme=\"snow\"\r\n                  value={this.state.textQuillStandart}\r\n                  onChange={this.handleChangeQuillStandart}\r\n                  modules={quillModules}\r\n                  formats={quillFormats}/>\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n        </Row>\r\n\r\n        <Row className=\"mb-4\">\r\n          <Colxx xxs=\"12\">\r\n            <Card>\r\n              <CardBody>\r\n                <CardTitle>\r\n                  <IntlMessages id=\"editors.quill-bubble\" />\r\n                </CardTitle>\r\n                <ReactQuill\r\n                  theme=\"bubble\"\r\n                  value={this.state.textQuillBubble}\r\n                  onChange={this.handleChangeQuillBubble}/>\r\n              </CardBody>\r\n            </Card>\r\n          </Colxx>\r\n        </Row>\r\n     \r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Col } from 'reactstrap';\r\nconst Colxx = (props) => (\r\n    <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\r\n);\r\nconst Separator = (props) => (\r\n    <div className={`separator ${props.className}`}></div>\r\n);\r\nexport { Colxx,Separator }","import React, { Fragment } from \"react\";\r\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\n\r\nconst getMenuTitle = sub => {\r\n  return <IntlMessages id={`menu.${sub}`} />;\r\n};\r\n\r\nconst getUrl = (path, sub, index) => {\r\n  if (index === 0) {\r\n    return \"\";\r\n  } else {\r\n    return path.split(sub)[0] + sub;\r\n  }\r\n};\r\n\r\nconst BreadcrumbContainer = ({ heading, match }) => {\r\n  return (\r\n    <Fragment>\r\n      {heading && <h1><IntlMessages id={heading}/></h1>}\r\n      <BreadcrumbItems match={match} />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport const BreadcrumbItems = ({ match }) => {\r\n  const path = match.path.substr(1);\r\n  let paths = path.split(\"/\");\r\n  if (paths[paths.length - 1].indexOf(\":\") > -1) {\r\n    paths = paths.filter(x => x.indexOf(\":\") === -1);\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\r\n        {paths.map((sub, index) => {\r\n          return (\r\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\r\n              {paths.length !== index + 1 ? (\r\n                <NavLink to={\"/\" + getUrl(path, sub, index)}>\r\n                  {getMenuTitle(sub)}\r\n                </NavLink>\r\n              ) : (\r\n                getMenuTitle(sub)\r\n              )}\r\n            </BreadcrumbItem>\r\n          );\r\n        })}\r\n      </Breadcrumb>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default BreadcrumbContainer;\r\n"],"sourceRoot":""}