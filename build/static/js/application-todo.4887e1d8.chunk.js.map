{"version":3,"sources":["components/applications/TodoListItem.js","containers/applications/AddNewTodoModal.js","containers/applications/TodoApplicationMenu.js","views/app/applications/todo.js","components/common/CustomBootstrap.js","containers/navs/Breadcrumb.js","components/common/CustomSelectInput.js","components/common/ApplicationMenu.js"],"names":["React","memo","item","handleCheckChange","isSelected","xxs","Card","className","CardBody","to","id","status","title","category","createDate","Badge","color","labelColor","pill","label","CustomInput","type","checked","onChange","event","detail","AddNewTodoModal","props","addNetItem","newItem","state","value","addTodoItem","toggleModal","setState","this","todoApp","labels","categories","modalOpen","Modal","isOpen","toggle","wrapClassName","backdrop","ModalHeader","IntlMessages","ModalBody","Label","Input","defaultValue","target","components","CustomSelectInput","classNamePrefix","name","options","map","x","i","key","val","defaultChecked","ModalFooter","Button","outline","onClick","Component","connect","TodoApplicationMenu","addFilter","column","getTodoListWithFilter","todoItems","filter","allTodoItems","loading","ApplicationMenu","suppressScrollX","wheelPropagation","NavItem","classnames","active","e","length","c","index","l","TodoApp","toggleDisplayOptions","displayOptionsIsOpen","toggleSplit","prevState","dropdownSplitOpen","changeOrderBy","getTodoListWithOrder","handleKeyPress","getTodoListSearch","lastChecked","selectedItems","Object","assign","includes","push","selectedTodoItemsChange","shiftKey","items","start","getIndex","end","slice","Math","min","max","Array","from","Set","handleChangeSelectAll","getTodoList","arr","prop","searchKeyword","orderColumn","orderColumns","messages","intl","Row","size","ButtonDropdown","DropdownToggle","caret","DropdownMenu","right","DropdownItem","Breadcrumb","match","Collapse","UncontrolledDropdown","o","placeholder","onKeyPress","injectIntl","Colxx","widths","Separator","getMenuTitle","sub","getUrl","path","split","BreadcrumbItems","substr","paths","indexOf","BreadcrumbContainer","heading","customProps","autoCorrect","autoCapitalize","params","handleDocumentClick","bind","container","ReactDOM","findDOMNode","contains","preventDefault","removeEvents","addEvents","forEach","document","addEventListener","removeEventListener","children"],"mappings":"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","file":"static/js/application-todo.4887e1d8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardBody, Badge, CustomInput } from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport { Colxx } from \"../common/CustomBootstrap\";\r\n\r\nconst TodoListItem = ({ item, handleCheckChange,isSelected }) => {\r\n  return (\r\n    <Colxx xxs=\"12\">\r\n      <Card className=\"card d-flex mb-3\">\r\n        <div className=\"d-flex flex-grow-1 min-width-zero\">\r\n          <CardBody className=\"align-self-center d-flex flex-column flex-md-row justify-content-between min-width-zero align-items-md-center\">\r\n            <NavLink\r\n              to=\"#\"\r\n              id={`toggler${item.id}`}\r\n              className=\"list-item-heading mb-0 truncate w-40 w-xs-100  mb-1 mt-1\"\r\n            >\r\n              <i\r\n                className={`${\r\n                  item.status === \"COMPLETED\"\r\n                    ? \"simple-icon-check heading-icon\"\r\n                    : \"simple-icon-refresh heading-icon\"\r\n                }`}\r\n              />\r\n              <span className=\"align-middle d-inline-block\">{item.title}</span>\r\n            </NavLink>\r\n            <p className=\"mb-1 text-muted text-small w-15 w-xs-100\">\r\n              {item.category}\r\n            </p>\r\n            <p className=\"mb-1 text-muted text-small w-15 w-xs-100\">\r\n              {item.createDate}\r\n            </p>\r\n            <div className=\"w-15 w-xs-100\">\r\n              <Badge color={item.labelColor} pill>\r\n                {item.label}\r\n              </Badge>\r\n            </div>\r\n          </CardBody>\r\n          <div className=\"custom-control custom-checkbox pl-1 align-self-center mr-4\">\r\n            <CustomInput\r\n              className=\"itemCheck mb-0\"\r\n              type=\"checkbox\"\r\n              id={`check_${item.id}`}\r\n              checked={isSelected}\r\n              onChange={event => handleCheckChange(event, item.id)}\r\n              label=\"\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"card-body pt-1\">\r\n          <p className=\"mb-0\">{item.detail}</p>\r\n        </div>\r\n      </Card>\r\n    </Colxx>\r\n  );\r\n};\r\n\r\nexport default React.memo(TodoListItem);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  CustomInput,\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Input,\r\n  Label\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport CustomSelectInput from \"../../components/common/CustomSelectInput\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\n\r\nimport { addTodoItem } from \"../../redux/actions\";\r\n\r\nclass AddNewTodoModal extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      title: \"\",\r\n      detail: \"\",\r\n      label: {},\r\n      labelColor: \"\",\r\n      category: {},\r\n      status: \"PENDING\"\r\n    };\r\n  }\r\n\r\n  addNetItem = () => {\r\n    const newItem = {\r\n      title: this.state.title,\r\n      detail: this.state.detail,\r\n      label: this.state.label.value,\r\n      labelColor: this.state.label.color,\r\n      category: this.state.category.value,\r\n      status: this.state.status\r\n    };\r\n    this.props.addTodoItem(newItem);\r\n    this.props.toggleModal();\r\n    this.setState({\r\n      title: \"\",\r\n      detail: \"\",\r\n      label: {},\r\n      category: {},\r\n      status: \"PENDING\"\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { labels, categories } = this.props.todoApp;\r\n    const { modalOpen, toggleModal } = this.props;\r\n    return (\r\n      <Modal\r\n        isOpen={modalOpen}\r\n        toggle={toggleModal}\r\n        wrapClassName=\"modal-right\"\r\n        backdrop=\"static\"\r\n      >\r\n        <ModalHeader toggle={toggleModal}>\r\n          <IntlMessages id=\"todo.add-new-title\" />\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <Label className=\"mt-4\">\r\n            <IntlMessages id=\"todo.title\" />\r\n          </Label>\r\n          <Input\r\n            type=\"text\"\r\n            defaultValue={this.state.title}\r\n            onChange={event => {\r\n              this.setState({ title: event.target.value });\r\n            }}\r\n          />\r\n          <Label className=\"mt-4\">\r\n            <IntlMessages id=\"todo.detail\" />\r\n          </Label>\r\n          <Input\r\n            type=\"textarea\"\r\n            defaultValue={this.state.detail}\r\n            onChange={event => {\r\n              this.setState({ detail: event.target.value });\r\n            }}\r\n          />\r\n\r\n          <Label className=\"mt-4\">\r\n            <IntlMessages id=\"todo.category\" />\r\n          </Label>\r\n          <Select\r\n            components={{ Input: CustomSelectInput }}\r\n            className=\"react-select\"\r\n            classNamePrefix=\"react-select\"\r\n            name=\"form-field-name\"\r\n            options={categories.map((x, i) => {\r\n              return { label: x, value: x, key: i };\r\n            })}\r\n            value={this.state.category}\r\n            onChange={val => {\r\n              this.setState({ category: val });\r\n            }}\r\n          />\r\n          <Label className=\"mt-4\">\r\n            <IntlMessages id=\"todo.label\" />\r\n          </Label>\r\n          <Select\r\n            components={{ Input: CustomSelectInput }}\r\n            className=\"react-select\"\r\n            classNamePrefix=\"react-select\"\r\n            name=\"form-field-name\"\r\n            options={labels.map((x, i) => {\r\n              return {\r\n                label: x.label,\r\n                value: x.label,\r\n                key: i,\r\n                color: x.color\r\n              };\r\n            })}\r\n            value={this.state.label}\r\n            onChange={val => {\r\n              this.setState({ label: val });\r\n            }}\r\n          />\r\n\r\n          <Label className=\"mt-4\">\r\n            <IntlMessages id=\"todo.status\" />\r\n          </Label>\r\n          <CustomInput\r\n            type=\"radio\"\r\n            id=\"exCustomRadio\"\r\n            name=\"customRadio\"\r\n            label=\"COMPLETED\"\r\n            checked={this.state.status === \"COMPLETED\"}\r\n            onChange={event => {\r\n              this.setState({\r\n                status: event.target.value === \"on\" ? \"COMPLETED\" : \"PENDING\"\r\n              });\r\n            }}\r\n          />\r\n          <CustomInput\r\n            type=\"radio\"\r\n            id=\"exCustomRadio2\"\r\n            name=\"customRadio2\"\r\n            label=\"PENDING\"\r\n            defaultChecked={this.state.status === \"PENDING\"}\r\n            onChange={event => {\r\n              this.setState({\r\n                status: event.target.value !== \"on\" ? \"COMPLETED\" : \"PENDING\"\r\n              });\r\n            }}\r\n          />\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" outline onClick={toggleModal}>\r\n            <IntlMessages id=\"todo.cancel\" />\r\n          </Button>\r\n          <Button color=\"primary\" onClick={() => this.addNetItem()}>\r\n            <IntlMessages id=\"todo.submit\" />\r\n          </Button>{\" \"}\r\n        </ModalFooter>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ todoApp }) => {\r\n  return {\r\n    todoApp\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    addTodoItem\r\n  }\r\n)(AddNewTodoModal);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { NavItem, Badge } from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\nimport classnames from \"classnames\";\r\n\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\nimport ApplicationMenu from \"../../components/common/ApplicationMenu\";\r\nimport { getTodoListWithFilter } from \"../../redux/actions\";\r\nclass TodoApplicationMenu extends Component {\r\n  constructor(props) {\r\n    super();\r\n  }\r\n\r\n  addFilter = (column, value) => {\r\n    this.props.getTodoListWithFilter(column, value);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      todoItems,\r\n      filter,\r\n      allTodoItems,\r\n      loading,\r\n      labels,\r\n      categories\r\n    } = this.props.todoApp;\r\n\r\n    return (\r\n      <ApplicationMenu>\r\n        <PerfectScrollbar\r\n          options={{ suppressScrollX: true, wheelPropagation: false }}\r\n        >\r\n          <div className=\"p-4\">\r\n            <p className=\"text-muted text-small\">\r\n              <IntlMessages id=\"todo.status\" />\r\n            </p>\r\n            <ul className=\"list-unstyled mb-5\">\r\n              <NavItem className={classnames({ active: !filter })}>\r\n                <NavLink to=\"#\" onClick={e => this.addFilter(\"\", \"\")}>\r\n                  <i className=\"simple-icon-reload\" />\r\n                  <IntlMessages id=\"todo.all-tasks\" />\r\n                  <span className=\"float-right\">\r\n                    {loading && allTodoItems.length}\r\n                  </span>\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem\r\n                className={classnames({\r\n                  active:\r\n                    filter &&\r\n                    filter.column === \"status\" &&\r\n                    filter.value === \"PENDING\"\r\n                })}>\r\n                <NavLink\r\n                  to=\"#\"\r\n                  onClick={e => this.addFilter(\"status\", \"PENDING\")}>\r\n                  <i className=\"simple-icon-refresh\" />\r\n                  <IntlMessages id=\"todo.pending-tasks\" />\r\n                  <span className=\"float-right\">\r\n                    {loading &&\r\n                      todoItems.filter(x => x.status === \"PENDING\").length}\r\n                  </span>\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem\r\n                className={classnames({\r\n                  active:\r\n                    filter &&\r\n                    filter.column === \"status\" &&\r\n                    filter.value === \"COMPLETED\"\r\n                })}>\r\n                <NavLink\r\n                  to=\"#\"\r\n                  onClick={e => this.addFilter(\"status\", \"COMPLETED\")}>\r\n                  <i className=\"simple-icon-check\" />\r\n                  <IntlMessages id=\"todo.completed-tasks\" />\r\n                  <span className=\"float-right\">\r\n                    {loading &&\r\n                      todoItems.filter(x => x.status === \"COMPLETED\").length}\r\n                  </span>\r\n                </NavLink>\r\n              </NavItem>\r\n            </ul>\r\n            <p className=\"text-muted text-small\">\r\n              <IntlMessages id=\"todo.categories\" />\r\n            </p>\r\n            <ul className=\"list-unstyled mb-5\">\r\n              {categories.map((c, index) => {\r\n                return (\r\n                  <NavItem key={index}>\r\n                    <div onClick={e => this.addFilter(\"category\", c)}>\r\n                      <div className=\"custom-control custom-radio\">\r\n                        <input\r\n                          type=\"radio\"\r\n                          className=\"custom-control-input\"\r\n                          defaultChecked={\r\n                            filter &&\r\n                            filter.column === \"category\" &&\r\n                            filter.value === c\r\n                          }\r\n                        />\r\n                        <label className=\"custom-control-label\">{c}</label>\r\n                      </div>\r\n                    </div>\r\n                  </NavItem>\r\n                );\r\n              })}\r\n            </ul>\r\n            <p className=\"text-muted text-small\">\r\n              <IntlMessages id=\"todo.labels\" />\r\n            </p>\r\n            <div>\r\n              {labels.map((l, index) => {\r\n                return (\r\n                  <p className=\"d-sm-inline-block mb-1\" key={index}>\r\n                    <NavLink\r\n                      to=\"#\"\r\n                      onClick={e => this.addFilter(\"label\", l.label)}\r\n                    >\r\n                      <Badge\r\n                        className=\"mb-1\"\r\n                        color={`${\r\n                          filter &&\r\n                          filter.column === \"label\" &&\r\n                          filter.value === l.label\r\n                            ? l.color\r\n                            : \"outline-\" + l.color\r\n                        }`}\r\n                        pill\r\n                      >\r\n                        {l.label}\r\n                      </Badge>\r\n                    </NavLink>\r\n                  </p>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </PerfectScrollbar>\r\n      </ApplicationMenu>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ todoApp }) => {\r\n  return {\r\n    todoApp\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    getTodoListWithFilter\r\n  }\r\n)(TodoApplicationMenu);\r\n","import React, { Component, Fragment } from \"react\";\r\nimport {\r\n  Row,\r\n  Button,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownItem,\r\n  DropdownMenu,\r\n  Collapse,\r\n  ButtonDropdown,\r\n  CustomInput\r\n} from \"reactstrap\";\r\nimport { injectIntl } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport IntlMessages from \"../../../helpers/IntlMessages\";\r\nimport { Colxx, Separator } from \"../../../components/common/CustomBootstrap\";\r\nimport Breadcrumb from \"../../../containers/navs/Breadcrumb\";\r\n\r\nimport {\r\n  getTodoList,\r\n  getTodoListWithOrder,\r\n  getTodoListSearch,\r\n  selectedTodoItemsChange\r\n} from \"../../../redux/actions\";\r\nimport TodoListItem from \"../../../components/applications/TodoListItem\";\r\nimport AddNewTodoModal from \"../../../containers/applications/AddNewTodoModal\";\r\nimport TodoApplicationMenu from \"../../../containers/applications/TodoApplicationMenu\";\r\n\r\nclass TodoApp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      dropdownSplitOpen: false,\r\n      modalOpen: false,\r\n      lastChecked: null,\r\n\r\n      displayOptionsIsOpen: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getTodoList();\r\n  }\r\n\r\n  toggleDisplayOptions = () => {\r\n    this.setState({ displayOptionsIsOpen: !this.state.displayOptionsIsOpen });\r\n  };\r\n\r\n  toggleModal = () => {\r\n    this.setState({\r\n      modalOpen: !this.state.modalOpen\r\n    });\r\n  };\r\n\r\n  toggleSplit = () => {\r\n    this.setState(prevState => ({\r\n      dropdownSplitOpen: !prevState.dropdownSplitOpen\r\n    }));\r\n  };\r\n\r\n  changeOrderBy = column => {\r\n    this.props.getTodoListWithOrder(column);\r\n  };\r\n\r\n  handleKeyPress = e => {\r\n    if (e.key === \"Enter\") {\r\n      this.props.getTodoListSearch(e.target.value);\r\n    }\r\n  };\r\n\r\n  handleCheckChange = (event, id) => {\r\n    if (this.state.lastChecked == null) {\r\n      this.setState({\r\n        lastChecked: id\r\n      });\r\n    }\r\n\r\n    let selectedItems = Object.assign([], this.props.todoApp.selectedItems);\r\n    if (selectedItems.includes(id)) {\r\n      selectedItems = selectedItems.filter(x => x !== id);\r\n    } else {\r\n      selectedItems.push(id);\r\n    }\r\n    this.props.selectedTodoItemsChange(selectedItems);\r\n\r\n    if (event.shiftKey) {\r\n      var items = this.props.todoApp.todoItems;\r\n      var start = this.getIndex(id, items, \"id\");\r\n      var end = this.getIndex(this.state.lastChecked, items, \"id\");\r\n      items = items.slice(Math.min(start, end), Math.max(start, end) + 1);\r\n      selectedItems.push(\r\n        ...items.map(item => {\r\n          return item.id;\r\n        })\r\n      );\r\n      selectedItems = Array.from(new Set(selectedItems));\r\n      this.props.selectedTodoItemsChange(selectedItems);\r\n    }\r\n    return;\r\n  };\r\n\r\n  handleChangeSelectAll = () => {\r\n    if (this.props.todoApp.loading) {\r\n      if (\r\n        this.props.todoApp.selectedItems.length >=\r\n        this.props.todoApp.todoItems.length\r\n      ) {\r\n        this.props.selectedTodoItemsChange([]);\r\n      } else {\r\n        this.props.selectedTodoItemsChange(\r\n          this.props.todoApp.todoItems.map(x => x.id)\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  getIndex(value, arr, prop) {\r\n    for (var i = 0; i < arr.length; i++) {\r\n      if (arr[i][prop] === value) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      todoItems,\r\n      searchKeyword,\r\n      loading,\r\n      orderColumn,\r\n      orderColumns,\r\n      selectedItems\r\n    } = this.props.todoApp;\r\n\r\n    const { messages } = this.props.intl;\r\n\r\n    const { modalOpen } = this.state;\r\n    return (\r\n      <Fragment>\r\n        <Row className=\"app-row survey-app\">\r\n          <Colxx xxs=\"12\">\r\n            <div className=\"mb-2\">\r\n              <h1>\r\n                <IntlMessages id=\"menu.todo\" />\r\n              </h1>\r\n              {loading && (\r\n                <div className=\"text-zero top-right-button-container\">\r\n                  <Button\r\n                    color=\"primary\"\r\n                    size=\"lg\"\r\n                    className=\"top-right-button\"\r\n                    onClick={this.toggleModal}\r\n                  >\r\n                    <IntlMessages id=\"todo.add-new\" />\r\n                  </Button>{\" \"}\r\n                  <ButtonDropdown\r\n                    isOpen={this.state.dropdownSplitOpen}\r\n                    toggle={this.toggleSplit}\r\n                  >\r\n                    <div className=\"btn btn-primary btn-lg pl-4 pr-0 check-button check-all\">\r\n                      <CustomInput\r\n                        className=\"custom-checkbox mb-0 d-inline-block\"\r\n                        type=\"checkbox\"\r\n                        id=\"checkAll\"\r\n                        checked={\r\n                          selectedItems.length >= todoItems.length\r\n                        }\r\n                        onClick={() => this.handleChangeSelectAll()}\r\n                        onChange={() => this.handleChangeSelectAll()}\r\n                        label={\r\n                          <span\r\n                            className={`custom-control-label ${\r\n                              selectedItems.length > 0 &&\r\n                              selectedItems.length < todoItems.length\r\n                                ? \"indeterminate\"\r\n                                : \"\"\r\n                            }`}\r\n                          />\r\n                        }\r\n                      />\r\n                    </div>\r\n                    <DropdownToggle\r\n                      caret\r\n                      color=\"primary\"\r\n                      className=\"dropdown-toggle-split btn-lg\"\r\n                    />\r\n                    <DropdownMenu right>\r\n                      <DropdownItem>\r\n                        <IntlMessages id=\"todo.action\" />\r\n                      </DropdownItem>\r\n                      <DropdownItem>\r\n                        <IntlMessages id=\"todo.another-action\" />\r\n                      </DropdownItem>\r\n                    </DropdownMenu>\r\n                  </ButtonDropdown>\r\n                </div>\r\n              )}\r\n              <Breadcrumb match={this.props.match} />\r\n            </div>\r\n\r\n            <div className=\"mb-2\">\r\n              <Button\r\n                color=\"empty\"\r\n                className=\"pt-0 pl-0 d-inline-block d-md-none\"\r\n                onClick={this.toggleDisplayOptions}>\r\n                <IntlMessages id=\"todo.display-options\" />{\" \"}\r\n                <i className=\"simple-icon-arrow-down align-middle\" />\r\n              </Button>\r\n              <Collapse\r\n                id=\"displayOptions\"\r\n                className=\"d-md-block\"\r\n                isOpen={this.state.displayOptionsIsOpen}>\r\n                <div className=\"d-block mb-2 d-md-inline-block\">\r\n                  <UncontrolledDropdown className=\"mr-1 float-md-left btn-group mb-1\">\r\n                    <DropdownToggle caret color=\"outline-dark\" size=\"xs\">\r\n                      <IntlMessages id=\"todo.orderby\" />\r\n                      {orderColumn ? orderColumn.label : \"\"}\r\n                    </DropdownToggle>\r\n                    <DropdownMenu>\r\n                      {orderColumns.map((o, index) => {\r\n                        return (\r\n                          <DropdownItem\r\n                            key={index}\r\n                            onClick={() => this.changeOrderBy(o.column)}\r\n                          >\r\n                            {o.label}\r\n                          </DropdownItem>\r\n                        );\r\n                      })}\r\n                    </DropdownMenu>\r\n                  </UncontrolledDropdown>\r\n                  <div className=\"search-sm d-inline-block float-md-left mr-1 mb-1 align-top\">\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"keyword\"\r\n                      id=\"search\"\r\n                      placeholder={messages[\"menu.search\"]}\r\n                      defaultValue={searchKeyword}\r\n                      onKeyPress={e => this.handleKeyPress(e)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Collapse>\r\n            </div>\r\n            <Separator className=\"mb-5\" />\r\n            <Row>\r\n              {loading ? (\r\n                todoItems.map((item, index) => (\r\n                  <TodoListItem\r\n                    key={`todo_item_${index}`}\r\n                    item={item}\r\n                    handleCheckChange={this.handleCheckChange}\r\n                    isSelected={\r\n                      loading ? selectedItems.includes(item.id) : false\r\n                    }\r\n                  />\r\n                ))\r\n              ) : (\r\n                <div className=\"loading\" />\r\n              )}\r\n            </Row>\r\n          </Colxx>\r\n        </Row>\r\n        {loading && <TodoApplicationMenu />}\r\n        <AddNewTodoModal toggleModal={this.toggleModal} modalOpen={modalOpen} />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = ({ todoApp }) => {\r\n  return {\r\n    todoApp\r\n  };\r\n};\r\nexport default injectIntl(\r\n  connect(\r\n    mapStateToProps,\r\n    {\r\n      getTodoList,\r\n      getTodoListWithOrder,\r\n      getTodoListSearch,\r\n      selectedTodoItemsChange\r\n    }\r\n  )(TodoApp)\r\n);\r\n","import React from 'react';\r\nimport { Col } from 'reactstrap';\r\nconst Colxx = (props) => (\r\n    <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\r\n);\r\nconst Separator = (props) => (\r\n    <div className={`separator ${props.className}`}></div>\r\n);\r\nexport { Colxx,Separator }","import React, { Fragment } from \"react\";\r\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\n\r\nconst getMenuTitle = sub => {\r\n  return <IntlMessages id={`menu.${sub}`} />;\r\n};\r\n\r\nconst getUrl = (path, sub, index) => {\r\n  if (index === 0) {\r\n    return \"\";\r\n  } else {\r\n    return path.split(sub)[0] + sub;\r\n  }\r\n};\r\n\r\nconst BreadcrumbContainer = ({ heading, match }) => {\r\n  return (\r\n    <Fragment>\r\n      {heading && <h1><IntlMessages id={heading}/></h1>}\r\n      <BreadcrumbItems match={match} />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport const BreadcrumbItems = ({ match }) => {\r\n  const path = match.path.substr(1);\r\n  let paths = path.split(\"/\");\r\n  if (paths[paths.length - 1].indexOf(\":\") > -1) {\r\n    paths = paths.filter(x => x.indexOf(\":\") === -1);\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\r\n        {paths.map((sub, index) => {\r\n          return (\r\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\r\n              {paths.length !== index + 1 ? (\r\n                <NavLink to={\"/\" + getUrl(path, sub, index)}>\r\n                  {getMenuTitle(sub)}\r\n                </NavLink>\r\n              ) : (\r\n                getMenuTitle(sub)\r\n              )}\r\n            </BreadcrumbItem>\r\n          );\r\n        })}\r\n      </Breadcrumb>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default BreadcrumbContainer;\r\n","import React from \"react\";\r\nimport { components } from \"react-select\";\r\n\r\nconst CustomSelectInput = props => {\r\n  var customProps = Object.assign({}, props);\r\n  delete customProps.autoCorrect;\r\n  delete customProps.autoCapitalize;\r\n  return <components.Input {...customProps} />;\r\n};\r\n\r\nexport default CustomSelectInput\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { NavLink } from \"reactstrap\";\r\nexport default class ApplicationMenu extends React.Component {\r\n  constructor(...params) {\r\n    super(...params);\r\n    this.handleDocumentClick = this.handleDocumentClick.bind(this);\r\n    this.toggle = this.toggle.bind(this);\r\n\r\n    this.state = {\r\n      isOpen: false\r\n    };\r\n  }\r\n\r\n  handleDocumentClick(e) {\r\n    const container = ReactDOM.findDOMNode(this);\r\n    if (container.contains(e.target) || container === e.target) {\r\n      return;\r\n    }\r\n\r\n    this.toggle(e);\r\n  }\r\n\r\n  toggle(e) {\r\n    e.preventDefault();\r\n    const isOpen = this.state.isOpen;\r\n    if (!isOpen) {\r\n      this.addEvents();\r\n    } else {\r\n      this.removeEvents();\r\n    }\r\n    this.setState({\r\n      isOpen: !isOpen\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.removeEvents();\r\n  }\r\n\r\n  addEvents() {\r\n    [\"click\", \"touchstart\"].forEach(event =>\r\n      document.addEventListener(event, this.handleDocumentClick, true)\r\n    );\r\n  }\r\n\r\n  removeEvents() {\r\n    [\"click\", \"touchstart\"].forEach(event =>\r\n      document.removeEventListener(event, this.handleDocumentClick, true)\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={`app-menu ${this.state.isOpen ? \"shown\" : \"\"}`}>\r\n        {this.props.children}\r\n\r\n        <NavLink\r\n          className=\"app-menu-button d-inline-block d-xl-none\"\r\n          onClick={this.toggle}\r\n        >\r\n          <i className=\"simple-icon-options\" />\r\n        </NavLink>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}